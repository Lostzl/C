/*
 * Author Lucas V.
 * Lista Encadeada Lineas e Algumas Operações.
 */

#include<stdio.h>
#include<stdlib.h>

typedef struct elemento
{
    int val;
    struct elemento* prox;
} Elemento;

Elemento* Lista = NULL; //PONTEIRO PARA REFERENCIAR O INICIO DA LISTA

int imprime_lista(Elemento* lista);
Elemento* adiciona_elemento_inicio(Elemento* lista, int val);//ADD ELEMENTO NO INICIO DA LISTA;
Elemento* adiciona_elemento_final(Elemento* lista, int val);//ADD ELEMENTO NO FINAL DA LISTA;
int busca(Elemento* lista, int val); //BUSCA ELEMENTO EM UMA LISTA;
Elemento* lista_remover(Elemento* lista, int val);//REMOVE ALGUM ELEMENTO DA LISTA;
void* destroi_lista(Elemento* lista);//DESTROI A LISTA(NÃO TENTE IMPRIMI-LA DEPOIS :);
Elemento* adiciona_elemento_ordenado(Elemento* lista, int val);//ADD ELEMENTO DE FORMA ORDENADA CRESCENTE;

int main()
{
    Elemento* lista;
    lista = NULL;

    lista = adiciona_elemento_ordenado(lista, 1);
    lista = adiciona_elemento_ordenado(lista, 2);
    lista = adiciona_elemento_ordenado(lista, 3);
    lista = adiciona_elemento_ordenado(lista, 4);

    Lista = lista;

    imprime_lista(lista);

    printf("\n----------------\n\n");

    lista = lista_remover(lista, 4);
    imprime_lista(Lista);


    system("pause");
    return 0;
}

int imprime_lista(Elemento* lista)
{
    Elemento* p;
    p = lista;


    if(p==NULL)
    {
        printf("\nNAO HA ELEMENTOS NA LISTA\n\n");
        return 0;
    }
    do
    {
        printf("\nVAL: %d\n\n", p->val);
        p = p->prox;

    }
    while(p != NULL);
    return 1;
}

Elemento* adiciona_elemento_inicio(Elemento* lista, int val)
{
    Elemento* novo = (Elemento*) malloc(sizeof(Elemento));

    if(lista == NULL)
    {
        novo->val = val;
        novo->prox = NULL;
        return novo;
    }
    else
    {
        novo->val = val;
        novo->prox=lista;
        return novo;
    }

}

Elemento* adiciona_elemento_final(Elemento* lista, int val)
{
    Elemento* novo = (Elemento*) malloc(sizeof(Elemento));
    Elemento* p;
    p = lista;
    novo->val = val;

    if(lista == NULL)
    {
        novo->prox = NULL;
        return novo;
    }
    else
    {
        while(p!=NULL)
        {
            if(p->prox==NULL)
            {
                novo->prox = NULL;
                p->prox= novo;
                return lista;
            }
            p = p->prox;
        }

    }

}
int busca(Elemento* lista, int val)
{
    int cont = 0;
    Elemento* p;
    p = lista;

    if(p == NULL)
    {
        printf("\nNao ha Elementos na Lista!!\n\n");
        return 0;
    }

    while(p->prox != NULL)
    {
        if(p->val == val)
        {
            printf("\nElemento Encontrado: %d\n\n", p->val);
            cont++;
        }
        p = p->prox;
    }
    if(cont == 0 && p->val == val)
    {
        printf("\nElemento Encontrado: %d\n\n", p->val);

    }
    else if(cont == 0)
    {
        printf("\nElemento Nao Encontrado!!\n\n");
    }
    return 1;
}

Elemento* lista_remover(Elemento* lista, int val)
{
    Elemento* a = NULL;
    Elemento* p;
    p = lista;

    while(p != NULL && p->val != val)
    {
        a = p;
        p = p->prox;
    }
    if(p == NULL)
    {

        return lista;
    }
    if(a == NULL)
    {

        lista = p->prox;

    }
    else
    {
        a->prox = p->prox;

    }
    free(p);
    return lista;

}
void* destroi_lista(Elemento* lista)
{
    Elemento* a = NULL;
    Elemento* p;
    p = lista;
    while(p != NULL)
    {
        a = p->prox;
        free(p);
        p = a;
    }
    free(p);
}
Elemento* adiciona_elemento_ordenado(Elemento* lista, int val)
{
    Elemento* a;
    a = NULL;
    Elemento* p;
    p = lista;
    Elemento* novo = (Elemento*) malloc(sizeof(Elemento));
    novo->val = val;

    while(p != NULL && p->val < val)
    {
        a = p;
        p = p->prox;

    }
    if(a == NULL)
    {
        novo->prox = p;
        lista = novo;

    }
    else
    {
        novo->prox = a->prox;
        a->prox = novo;

    }
    return lista;
}
