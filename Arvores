#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct str{
    int val;
    struct str *esquerda;
    struct str *direita;
}No;

No *adiciona_no_direita(No *n, int val);
No *adiciona_no_esquerda(No *n, int val);
void miprime_arvore(No *n);

int main(){

int i;

No *no;
no = NULL;
no = adiciona_no_direita(no, 1);
no = adiciona_no_esquerda(no, 2);
no = adiciona_no_direita(no, 3);
no = adiciona_no_esquerda(no, 4);
no = adiciona_no_direita(no, 5);
no = adiciona_no_esquerda(no, 6);
no = adiciona_no_direita(no, 7);

imprime_arvore(no);

printf("\n");
system("pause");
return 0;
}

No *adiciona_no_direita(No *n, int val){
    No *novo = (No *) malloc(sizeof(No));
    No *p;
    p = n;
    novo->val = val;
    novo->esquerda = NULL;
    novo->direita = NULL;
    if(n == NULL){
        return novo;
    }else{
        while(p->direita != NULL){
            p = p->direita;
        }
        p->direita = novo;
        return n;
    }
}
No *adiciona_no_esquerda(No *n, int val){
    No *novo = (No *) malloc(sizeof(No));
    No *p;
    p = n;
    novo->val = val;
    novo->esquerda = NULL;
    novo->direita = NULL;
    if(n == NULL){
        return novo;
    }else{
        while(p->esquerda != NULL){
            p = p->esquerda;
        }
        p->esquerda = novo;
        return n;
    }
}
//RED
void imprime_arvore(No *n){
    No *p;
    p = n;
    if((p == NULL)){

    }else{
        printf("\n%d\n", p->val);
        imprime_arvore(p->esquerda);
        imprime_arvore(p->direita);
    }
}
No *adiciona_no(No *n, int val){
    No *novo = (No *) malloc(sizeof(No));
    No *p;
    p = n;
    novo->val = val;
    novo->esquerda = NULL;
    novo->direita = NULL;
    if(n == NULL){
        return novo;
    }else{
        while(p->esquerda != NULL){
            p = p->esquerda;
        }
        p->esquerda = novo;
        return n;
    }
}
