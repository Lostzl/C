/**
 *@Author Lucas V.
 *
 */

#include<stdio.h>
#include<stdlib.h>
#define Max 10

typedef struct
{
    int Item[Max];
    int Topo1;
    int Topo2;

} Pilha_dupla;

void Pilha_inicia(Pilha_dupla *p);
int Pilha_insere(Pilha_dupla *p, int item, int pilha);
int Pilha_retira(Pilha_dupla *p, int *item, int pilha);
int tamanho_pilha(Pilha_dupla* p);
int exibir_pilha(Pilha_dupla* p, int pilha);

int main()
{
    Pilha_dupla *pd = (Pilha_dupla *) malloc(sizeof(Pilha_dupla));

    Pilha_inicia(pd);
    Pilha_insere(pd, 1, 1);
    Pilha_insere(pd, 2, 1);
    Pilha_insere(pd, 3, 1);
    Pilha_insere(pd, 4, 1);
    Pilha_insere(pd, 5, 1);
    Pilha_insere(pd, 6, 2);
    Pilha_insere(pd, 7, 2);
    Pilha_insere(pd, 8, 2);
    Pilha_insere(pd, 9, 2);
    Pilha_insere(pd, 10, 2);


    exibir_pilha(pd, 2);


    system("pause");
    return 0;
}
void Pilha_inicia(Pilha_dupla *p)
{
    p->Topo1 = -1;
    p->Topo2 = Max;
}

int Pilha_insere(Pilha_dupla *p, int item, int pilha)
{
    if(pilha < 1 || pilha > 2)
    {
        return 0;
    }
    if(p->Topo1+1 == p->Topo2)
    {
        return 0;
    }
    if(pilha == 1)
    {
        p->Topo1++;
        p->Item[p->Topo1] = item;
    }
    else
    {
        p->Topo2--;
        p->Item[p->Topo2] = item;
    }
    return 1;
}
int Pilha_retira(Pilha_dupla *p, int *item, int pilha)
{
    if(pilha < 1 || pilha > 2)
    {
        return 0;
    }
    if(pilha = 1)
    {
        if(p->Topo1 == -1)
        {
            return 0;
        }
        else
        {
            *item = p->Item[p->Topo1];
            p->Topo1--;
        }
    }
    else
    {
        if(p->Topo2 == Max)
        {
            return 0;
        }
        else
        {
            *item = p->Item[p->Topo2];
            p->Topo2++;
        }
    }
}
int tamanho_pilha(Pilha_dupla* p)
{
    return p->Topo1 + 1 + Max - p->Topo2;
}
int exibir_pilha(Pilha_dupla* p, int pilha)
{
    if (pilha < 1 || pilha > 2)
    {
        return 0;
    }
    printf("Pilha %i: \" ", pilha);
    int i;
    if (pilha == 1)
    {
        for (i = p->Topo1; i>=0; i--)
        {
            printf("%i ", p->Item[i]);
        }
    }
    else
    {
        for (i = p->Topo2; i<Max; i++)
        {
            printf("%i ", p->Item[i]);
        }
    }
    printf("\"\n");
    return 1;
}
